'use strict';
const Generator = require('yeoman-generator');
const chalk = require('chalk');
const yosay = require('yosay');

const Rx = require('rxjs');
const {exec} = require('child_process');
const exec$ = command => {
  console.log(command);
  return Rx.Observable.bindNodeCallback(exec)(command)
    .do(output => console.log(output[0].slice(0, -1)));
};

/*
Const spawn$ = (command, args) => Rx.Observable.bindNodeCallback(spawn)(
  command,
  args,
  {}
).do(console.log);
*/

const bold = msg => console.log(chalk.bold(msg));

module.exports = class extends Generator {
  initializing() {
    const done = this.async();
    bold('verifying travis CLI');
    exec$('which travis')
      .do(() => console.log('travis CLI verified\n'), () => console.log('pleae gem install travis'))
      .do(() => bold('verifying travis login'))
      .flatMap(() => exec$('travis whoami'))
      .do(() => console.log('travis login verified\n'), () => console.log('please `travis login`'))
      .do(() => bold('generating keys'))
      .flatMap(() => exec$('ssh-keygen -t rsa -b 4096 -C travis@robot.ci -f github_deploy_key -N \'\''))
      .do(() => console.log('\n'))
      // .do(output => output.forEach(console.log))
      .flatMap(() => exec$('pbcopy < github_deploy_key.pub'))
      .flatMap(() => exec$('rm github_deploy_key.pub'))
      .flatMap(() => exec$('mkdir -p .travis'))
      .flatMap(() => exec$('travis encrypt-file github_deploy_key .travis/github_deploy_key.enc'))
      .flatMap(() => exec$('yarn add @alrra/travis-scripts'))
      // .do(() => exec$("open `git remote -v | awk '/fetch/{print $2}' | sed -Ee 's#(git@|git://)#http://#' -e 's@com:@com/@'`| head -n1"))
      .subscribe(null, null, done);
  }
  // .gitignore github_deploy_key
  // check for existing files
  // # deploy key generated by CI for pushing releases to GH
  // add deploy key to github - script

  prompting() {
    // Have Yeoman greet the user.
    this.log(yosay(
      'Welcome to the mind-blowing ' + chalk.red('generator-meetup-npm') + ' generator!'
    ));

    const prompts = [{
      type: 'confirm',
      name: 'someAnswer',
      message: 'Would you like to enable this option?',
      default: true
    }];

    return this.prompt(prompts).then(props => {
      // To access props later use this.props.someAnswer;
      this.props = props;
    });
  }

  writing() {
    this.fs.copy(
      this.templatePath('Makefile'),
      this.destinationPath('Makefile')
    );
    this.fs.copy(
      this.templatePath('.travis.yml'),
      this.destinationPath('.travis.yml')
    );
  }

  install() {
    // This.installDependencies();
  }
};
